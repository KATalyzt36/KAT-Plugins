plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
    }
    mavenCentral()
    jcenter()
}

def runeLiteVersion = 'latest.release'
//def runeLiteVersion = '1.10.34'

dependencies {
    compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation 'junit:junit:4.12'
    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion
    implementation 'org.json:json:20230227'
    implementation 'org.roaringbitmap:RoaringBitmap:0.9.44'
    implementation("com.google.archivepatcher:archive-patch-applier:1.0.4")
    implementation("org.benf:cfr:0.152")
}
sourceSets {
    main {

        java {
            srcDir "src"
        }

    }
}

group = 'com.example'
version = 'v1.0.0'
sourceCompatibility = "11"
targetCompatibility = "11"

task FatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.example.Main'
    }
    baseName = 'KATPlugins'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude("com/example/hidden")
    exclude("com/example/PathingTesting")
    with jar
}

task FatJarWithHidden(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.example.Main'
    }
    baseName = 'KATPluginsWithHidden'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runRL(type: JavaExec) {
    group = 'Useful'
    description = 'Run Lite with Gradle'

    classpath = sourceSets.test.runtimeClasspath
    main = 'com.example.Runner'
    jvmArgs = ['-ea', '-Duser.home=/home/user/IdeaProjects/KATPlugins/RL'] // Second parameter is to create an Developer instance of .runelite
    args = ['--developer-mode']
    workingDir = file('/home/user/IdeaProjects/KAT-Plugins')
}

task KATPluginsNoApi(type: Jar) {
    group = 'Export/Compile'
    description = 'KATPluginsNoApi to JAR file'
    manifest {
    }
    baseName = 'KATPlugins'
    exclude("com/example")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task katapi(type: Jar) {
    group = 'Export/Compile'
    description = 'katapi to JAR file'
    manifest {
    }
    baseName = 'katapi'
    exclude("com.example")
    exclude("net.kat.inventoryids")
    exclude("net.kat.spell2key")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task inventoryIDs(type: Jar) {
    group = 'Export/Compile'
    description = 'inventoryIDs to JAR file'
    manifest {
    }
    baseName = 'inventoryIDs'
    exclude("com.example")
    exclude("net.kat.katapi")
    exclude("net.kat.spell2key")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task spell2key(type: Jar) {
    group = 'Export/Compile'
    description = 'spell2key to JAR file'
    manifest {
    }
    baseName = 'spell2key'
    exclude("com.example")
    exclude("net.kat.katapi")
    exclude("net.kat.invetoryids")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username 'admin'
                password 'password'
            }
            url "http://baseUrl/artifactory/libs-release-local"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
targetCompatibility = JavaVersion.VERSION_11
